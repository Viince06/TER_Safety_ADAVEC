L2, L1 = AddClock(L3);
L3 = a;
presence = L2;
alive = L1;
L2, L1 = AddClock(L3);
L3 = b;
presence = L2;
alive = L1;
L2, L1 = AddClock(L3);
L3 = c;
presence = L2;
alive = L1;
L2, L1 = AddClock(L3);
L3 = d;
presence = L2;
alive = L1;
L2, L1 = AddClock(L3);
L3 = e;
presence = L2;
alive = L1;
L2, L1 = AddClock(L3);
L3 = f;
presence = L2;
alive = L1;
L1 = SubClock(L2, L3);
L2 = a;
L3 = b;
v = L1;
L1 = Precedence(L2, L3, L4);
L2 = a;
L3 = b;
L4 = kind;
v = L1;
L1 = Causality2(L2, L3, L4, L5, L6);
L2 = b;
L3 = c;
L4 = 2;
L5 = 5;
L6 = kind
v = L1
L1 = Causality2(L2, L3, L4, L5, L6);
L2 = c;
L3 = d;
L4 = 2;
L5 = -1;
L6 = kind
v = L1
L1 = Exclusion(L2, L3);
L2 = a;
L3 = c;
v = L1;
L1 = Minus(L2, L3);
L2 = test;
L3 = [Ljava.lang.String;@1ef7fe8e;
c = L1;
L1 = Minus(L2, L3);
L2 = _test2_0;
L3 = [Ljava.lang.String;@6f79caec;
c = L1;
L1 = Minus(L2, L3);
L2 = test2;
L3 = [Ljava.lang.String;@67117f44;
c = L1;
L1 = Intersection(L2, L3);
L2 = _test3_0;
L3 = [Ljava.lang.String;@5d3411d;
c = L1;
L1 = Minus(L2, L3);
L2 = test3;
L3 = [Ljava.lang.String;@2471cca7;
c = L1;
L1 = Periodic(L2, L3, L4, L5, L6);
L2 = aprime;
L3 = a;
L4 = 5;
L5 = 3;
L6 = 10;
v = L1;
L1 = DelayFor(L2, L3, L4, L5, L6);
L2 = g;
L3 = a;
L4 = 5;
L5 = -1;
L6 = b;
v = L1;
L1 = DelayFor(L2, L3, L4, L5, L6);
L2 = h;
L3 = a;
L4 = 5;
L5 = -1;
L6 = null;
v = L1;
L1 = DelayFor(L2, L3, L4, L5, L6);
L2 = i;
L3 = a;
L4 = 5;
L5 = 10;
L6 = null;
v = L1;
L1 = DelayFor(L2, L3, L4, L5, L6);
L2 = l;
L3 = a;
L4 = 0;
L5 = -1;
L6 = b;
v = L1;
L1 = Inf(L2, L3);
L2 = j;
L3 = [Ljava.lang.String;@5fe5c6f;
c = L1;
L1 = Sup(L2, L3);
L2 = k;
L3 = [Ljava.lang.String;@6979e8cb;
c = L1;
